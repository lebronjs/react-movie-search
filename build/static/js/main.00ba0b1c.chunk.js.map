{"version":3,"sources":["components/Header/index.tsx","components/Movie/index.tsx","components/Search/index.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","className","text","Movie","movie","poster","Poster","data-t","title","Title","height","width","alt","src","Year","Search","useState","searchValue","setSearchValue","placeholder","value","onChange","e","target","type","onClick","preventDefault","search","App","loading","setLoading","movies","setMovies","errorMessage","setErrorMessage","useEffect","fetch","then","response","json","jsonResponse","Helmet","Response","setTimeout","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0OAUeA,G,MARA,SAACC,GACZ,OACI,4BAAQC,UAAU,cACd,4BAAKD,EAAME,SCmBRC,EArBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACPC,EACe,QAAjBD,EAAME,OAHV,qGAGyDF,EAAME,OAC/D,OACI,yBAAKL,UAAU,SACX,wBAAIM,SAAO,IAAIC,MAAOJ,EAAMK,OACvBL,EAAMK,OAEX,6BACI,yBACIC,OAAO,MACPC,MAAM,MACNC,IAAG,4BAAuBR,EAAMK,OAChCI,IAAKR,KAGb,+BAAKD,EAAMU,KAAX,OCaGC,EA9BA,SAACf,GAAW,IAAD,EACgBgB,mBAAS,IADzB,mBACfC,EADe,KACFC,EADE,KAiBtB,OACI,0BAAMjB,UAAU,UACZ,2BACIkB,YAAY,qEACZC,MAAOH,EACPI,SAnBqB,SAACC,GAC9BJ,EAAeI,EAAEC,OAAOH,QAmBhBI,KAAK,SAET,2BAAOC,QAdY,SAACH,GACxBA,EAAEI,iBACF1B,EAAM2B,OAAOV,GALbC,EAAe,KAiByBM,KAAK,SAASJ,MAAM,aCwDrDQ,MAjEf,WAAgB,IAAD,EACmBZ,oBAAS,GAD5B,mBACJa,EADI,KACKC,EADL,OAEiBd,mBAAS,IAF1B,mBAEJe,EAFI,KAEIC,EAFJ,OAG6BhB,mBAAS,MAHtC,mBAGJiB,EAHI,KAGUC,EAHV,KAgCX,OA3BAC,qBAAU,WACNC,MARJ,8DASSC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACHR,EAAUQ,EAAazB,QACvBe,GAAW,QAEpB,IAqBC,yBAAK7B,UAAU,OACX,kBAACwC,EAAA,EAAD,KACI,wEAEJ,kBAAC,EAAD,CAAQvC,KAAK,0BACb,kBAAC,EAAD,CAAQyB,OAxBD,SAACV,GACZa,GAAW,GACXI,EAAgB,MAEhBE,MAAM,8BAAD,OAA+BnB,EAA/B,qBACAoB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAC2B,SAA1BA,EAAaE,UACbV,EAAUQ,EAAazB,QACvB4B,YAAW,WACPb,GAAW,KACZ,OAEHI,EAAgBM,EAAaI,OAC7Bd,GAAW,UAWnB,uBAAG7B,UAAU,aAAb,yCACA,yBAAKA,UAAU,UACV4B,IAAYI,EACT,yBAAKhC,UAAU,YACX,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,+BAEJgC,EACA,yBAAKhC,UAAU,gBAAgBgC,GAE/BF,EAAOc,KAAI,SAACzC,EAAc0C,GAAf,OACP,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAc1C,EAAMK,OAASL,MAAOA,UC/DlD4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.00ba0b1c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props: any) => {\n    return (\n        <header className=\"App-header\">\n            <h2>{props.text}</h2>\n        </header>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nconst DEFAULT_PLACEHOLDER_IMAGE =\n    'https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg';\nconst Movie = ({ movie }) => {\n    const poster =\n        movie.Poster === 'N/A' ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\n    return (\n        <div className=\"movie\">\n            <h2 data-t=\"1\" title={movie.Title}>\n                {movie.Title}\n            </h2>\n            <div>\n                <img\n                    height=\"300\"\n                    width=\"220\"\n                    alt={`The movie titled: ${movie.Title}`}\n                    src={poster}\n                />\n            </div>\n            <p>({movie.Year})</p>\n        </div>\n    );\n};\n\nexport default Movie;\n","import React, { useState } from 'react';\n\nconst Search = (props) => {\n    const [searchValue, setSearchValue] = useState('');\n\n    const handleSearchInputChanges = (e) => {\n        setSearchValue(e.target.value);\n    };\n\n    const resetInputField = () => {\n        setSearchValue('');\n    };\n\n    const callSearchFunction = (e) => {\n        e.preventDefault();\n        props.search(searchValue);\n        resetInputField();\n    };\n\n    return (\n        <form className=\"search\">\n            <input\n                placeholder=\"ËØ∑ËæìÂÖ•ÁîµÂΩ±Ëã±ÊñáÂêç„ÄÇ„ÄÇ„ÄÇ\"\n                value={searchValue}\n                onChange={handleSearchInputChanges}\n                type=\"text\"\n            />\n            <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\n        </form>\n    );\n};\n\nexport default Search;\n","import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport './index.css';\nimport Header from '../Header';\nimport Movie from '../Movie';\nimport Search from '../Search';\n\ninterface Movie {\n    Title: string;\n    Year: number;\n    imdbID: number;\n    Type: string;\n    Poster: string;\n}\n\nconst MOVIE_API_URL =\n    'https://www.omdbapi.com/?s=Detective Conan&apikey=4a3b711b'; // you should replace this with yours\n\nfunction App() {\n    const [loading, setLoading] = useState(true);\n    const [movies, setMovies] = useState([]);\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    useEffect(() => {\n        fetch(MOVIE_API_URL)\n            .then((response) => response.json())\n            .then((jsonResponse) => {\n                setMovies(jsonResponse.Search);\n                setLoading(false);\n            });\n    }, []);\n\n    const search = (searchValue) => {\n        setLoading(true);\n        setErrorMessage(null);\n\n        fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n            .then((response) => response.json())\n            .then((jsonResponse) => {\n                if (jsonResponse.Response === 'True') {\n                    setMovies(jsonResponse.Search);\n                    setTimeout(() => {\n                        setLoading(false);\n                    }, 2000);\n                } else {\n                    setErrorMessage(jsonResponse.Error);\n                    setLoading(false);\n                }\n            });\n    };\n    return (\n        <div className=\"App\">\n            <Helmet>\n                <title>üé¨ÁîµÂΩ±ÊêúÁ¥¢</title>\n            </Helmet>\n            <Header text=\"Lebronjs Movie Search\" />\n            <Search search={search} />\n            <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n            <div className=\"movies\">\n                {loading && !errorMessage ? (\n                    <div className=\"lds-grid\">\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                    </div>\n                ) : errorMessage ? (\n                    <div className=\"errorMessage\">{errorMessage}</div>\n                ) : (\n                    movies.map((movie: Movie, index) => (\n                        <Movie key={`${index}-${movie.Title}`} movie={movie} />\n                    ))\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}